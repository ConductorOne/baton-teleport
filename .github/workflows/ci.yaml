name: ci
on: 
  workflow_dispatch:
  pull_request:
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.23.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: (set -o pipefail && go test -v -covermode=count -json ./... | tee test.json)
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json

  test:
    permissions:
      id-token: write
      contents: read
      pages: write
    runs-on: ubuntu-latest
    env:
      BATON_LOG_LEVEL: debug
      CONNECTOR_GRANT: ${{ vars.GRANT }}
      CONNECTOR_ENTITLEMENT: ${{ vars.ENTITLEMENT }}
      CONNECTOR_PRINCIPAL: ${{ vars.PRINCIPAL }}
      CONNECTOR_PRINCIPAL_TYPE: ${{ vars.PRINCIPAL_TYPE }}
      BATON_TELEPORT_KEY_PATH: /opt/machine-id/identity
      BATON_TELEPORT_PROXY_ADDRESS: ${{ secrets.PROXY }}

    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.x

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch Teleport binaries
        uses: teleport-actions/setup@v1
        with:
          version: 18.2.0

      - name: Fetch credentials using Machine ID
        id: auth
        uses: teleport-actions/auth@v2
        with:
          proxy: ${{ secrets.PROXY }}
          token: ${{ secrets.TOKEN }}
          anonymous-telemetry: 1

      - name: Add identity file
        run: |
          mkdir -p /opt/machine-id
          cp ${{ steps.auth.outputs.identity-file }} /opt/machine-id/identity

      - name: Build baton-teleport
        run: go build ./cmd/baton-teleport

      - name: Run baton-teleport (initial sync)
        run: ./baton-teleport

      - name: Install baton
        run: ./scripts/get-baton.sh && mv baton /usr/local/bin

      - name: Grant entitlement
        run: ./baton-teleport --grant-entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --grant-principal="${{ env.CONNECTOR_PRINCIPAL }}" --grant-principal-type="${{ env.CONNECTOR_PRINCIPAL_TYPE }}"

      - name: Re-sync after grant
        run: ./baton-teleport

      - name: Check grant was granted
        run: baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq -e ".grants | any(.principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\")"

      - name: Revoke grant
        run: ./baton-teleport --revoke-grant="${{ env.CONNECTOR_GRANT }}"

      - name: Re-sync after revoke
        run: ./baton-teleport

      - name: Check grant was revoked
        run: baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status "if .grants then all(.grants[]; .principal.id.resource != \"${{ env.CONNECTOR_PRINCIPAL }}\") else true end"

      - name: Re-grant entitlement
        run: ./baton-teleport --grant-entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --grant-principal="${{ env.CONNECTOR_PRINCIPAL }}" --grant-principal-type="${{ env.CONNECTOR_PRINCIPAL_TYPE }}"

      - name: Re-sync after re-grant
        run: ./baton-teleport

      - name: Check grant was re-granted
        run: baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq -e ".grants | any(.principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\")"
